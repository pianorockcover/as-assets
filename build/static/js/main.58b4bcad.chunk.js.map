{"version":3,"sources":["components/icons.ts","components/RichTextEditor/RichTextEditorTools.tsx","components/RichTextEditor/RichTextEditor.tsx","components/Comments/Comment.tsx","components/Comments/Comments.tsx","App.tsx","customTheme.ts","index.tsx"],"names":["icons","List","FormatBold","FormatItalic","FormatUnderlined","useStyles","makeStyles","richEditorTools","borderBottom","btn","padding","borderRadius","borderRight","controls","type","icon","style","RichTextEditorTools","editorState","toggleBlockType","toggleInlineStyle","classes","onToggleControl","useCallback","e","preventDefault","currentStyle","getCurrentInlineStyle","selection","getSelection","blockType","getCurrentContent","getBlockForKey","getStartKey","getType","className","map","control","i","IconComponent","color","has","IconButton","size","onMouseDown","richEditorWrapper","background","border","marginBottom","richEditorArea","minHeight","overflowY","styleMap","BOLD","fontWeight","RichTextEditor","forceClean","props","useState","EditorState","createEmpty","setEditorState","useEffect","ref","createRef","onChange","nextEditorState","content","rawObject","convertToRaw","markdownString","draftToMarkdown","RichUtils","inlineStyle","onClickArea","current","focus","onClick","spellCheck","customStyleMap","comment","author","date","opacity","SingleComment","React","memo","text","rawData","markdownToDraft","contentState","convertFromRaw","createWithContent","noop","readOnly","CommentContainer","children","index","showLastComment","animationTimeout","visible","Zoom","in","timeout","comments","marginTop","maxHeight","overflowX","Comments","data","setShowLastComment","setAnimationTimeout","dataLengthRef","useRef","length","setTimeout","key","appWrapper","margin","maxWidth","height","App","fakeApiComments","setComments","setForceClean","currentComment","setCurrentComment","leaveComment","Date","Button","variant","customTheme","createMuiTheme","palette","primary","main","ReactDOM","render","StrictMode","CssBaseline","ThemeProvider","theme","document","getElementById"],"mappings":"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","file":"static/js/main.58b4bcad.chunk.js","sourcesContent":["import List from \"@material-ui/icons/List\";\r\nimport FormatBold from \"@material-ui/icons/FormatBold\";\r\nimport FormatItalic from \"@material-ui/icons/FormatItalic\";\r\nimport FormatUnderlined from \"@material-ui/icons/FormatUnderlined\";\r\nimport { OverridableComponent } from \"@material-ui/core/OverridableComponent\";\r\nimport { SvgIconTypeMap } from \"@material-ui/core\";\r\n\r\nconst icons: {\r\n\t[key: string]: OverridableComponent<SvgIconTypeMap<{}, \"svg\">>;\r\n} = {\r\n\tList,\r\n\tFormatBold,\r\n\tFormatItalic,\r\n\tFormatUnderlined,\r\n};\r\n\r\nexport const getIcon = (icon: string) => icons[icon];\r\n","import { IconButton } from \"@material-ui/core\";\r\nimport React, { useCallback } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { getIcon } from \"../icons\";\r\nimport { EditorState } from \"draft-js\";\r\n\r\nconst useStyles = makeStyles({\r\n\trichEditorTools: {\r\n\t\tborderBottom: \"1px solid #d2d2d2\",\r\n\t},\r\n\tbtn: {\r\n\t\tpadding: 4,\r\n\t\tborderRadius: 0,\r\n\t\tborderRight: \"1px solid #d2d2d2\",\r\n\t},\r\n});\r\n\r\ninterface ToolControl {\r\n\ttype: \"inline\" | \"block\";\r\n\ticon: string;\r\n\tstyle: string;\r\n}\r\n\r\nconst controls: ToolControl[] = [\r\n\t{\r\n\t\ttype: \"inline\",\r\n\t\ticon: \"FormatBold\",\r\n\t\tstyle: \"BOLD\",\r\n\t},\r\n\t{\r\n\t\ttype: \"inline\",\r\n\t\ticon: \"FormatItalic\",\r\n\t\tstyle: \"ITALIC\",\r\n\t},\r\n\t{\r\n\t\ttype: \"inline\",\r\n\t\ticon: \"FormatUnderlined\",\r\n\t\tstyle: \"UNDERLINE\",\r\n\t},\r\n\t{\r\n\t\ttype: \"block\",\r\n\t\tstyle: \"unordered-list-item\",\r\n\t\ticon: \"List\",\r\n\t},\r\n];\r\n\r\ninterface RichTextEditorToolsProps {\r\n\teditorState: EditorState;\r\n\ttoggleBlockType: (blockType: string) => void;\r\n\ttoggleInlineStyle: (inlineStyle: string) => void;\r\n}\r\n\r\nexport const RichTextEditorTools: React.FC<RichTextEditorToolsProps> = ({\r\n\teditorState,\r\n\ttoggleBlockType,\r\n\ttoggleInlineStyle,\r\n}: RichTextEditorToolsProps): JSX.Element => {\r\n\tconst classes = useStyles();\r\n\tconst onToggleControl = useCallback(\r\n\t\t({ type, style }: ToolControl) => (\r\n\t\t\te: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n\t\t) => {\r\n\t\t\te.preventDefault();\r\n\t\t\tif (type === \"block\") {\r\n\t\t\t\ttoggleBlockType(style);\r\n\t\t\t} else {\r\n\t\t\t\ttoggleInlineStyle(style);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[toggleBlockType, toggleInlineStyle]\r\n\t);\r\n\r\n\tconst currentStyle = editorState.getCurrentInlineStyle();\r\n\tconst selection = editorState.getSelection();\r\n\tconst blockType = editorState\r\n\t\t.getCurrentContent()\r\n\t\t.getBlockForKey(selection.getStartKey())\r\n\t\t.getType();\r\n\r\n\treturn (\r\n\t\t<div className={classes.richEditorTools}>\r\n\t\t\t{controls.map((control, i) => {\r\n\t\t\t\tconst IconComponent = getIcon(control.icon);\r\n\t\t\t\tconst color =\r\n\t\t\t\t\t(control.type === \"inline\" &&\r\n\t\t\t\t\t\tcurrentStyle.has(control.style)) ||\r\n\t\t\t\t\t(control.type === \"block\" && control.style === blockType)\r\n\t\t\t\t\t\t? \"primary\"\r\n\t\t\t\t\t\t: \"default\";\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tclassName={classes.btn}\r\n\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\tonMouseDown={onToggleControl(control)}\r\n\t\t\t\t\t\tcolor={color}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{IconComponent && <IconComponent />}\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { createRef, useCallback, useEffect, useState } from \"react\";\r\nimport { convertToRaw, Editor, EditorState, RichUtils } from \"draft-js\";\r\nimport { RichTextEditorTools } from \"./RichTextEditorTools\";\r\nimport { draftToMarkdown } from \"markdown-draft-js\";\r\n\r\nconst border = \"1px solid #d2d2d2\";\r\n\r\nconst useStyles = makeStyles({\r\n\trichEditorWrapper: {\r\n\t\tbackground: \"#ffffff\",\r\n\t\tborder,\r\n\t\tmarginBottom: 20,\r\n\t},\r\n\trichEditorArea: {\r\n\t\tpadding: 10,\r\n\t\tminHeight: 200,\r\n\t\toverflowY: \"auto\",\r\n\t},\r\n});\r\n\r\nconst styleMap = {\r\n\tBOLD: {\r\n\t\tfontWeight: 600,\r\n\t},\r\n};\r\n\r\ninterface RichTextEditorProps {\r\n\tonChange: (value: string) => void;\r\n\tforceClean?: number;\r\n}\r\n\r\nexport const RichTextEditor: React.FC<RichTextEditorProps> = ({\r\n\tforceClean,\r\n\t...props\r\n}: RichTextEditorProps): JSX.Element => {\r\n\tconst classes = useStyles();\r\n\r\n\tconst [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n\r\n\tuseEffect(() => {\r\n\t\tif (forceClean) {\r\n\t\t\tsetEditorState(EditorState.createEmpty());\r\n\t\t}\r\n\t}, [forceClean]);\r\n\r\n\tconst ref = createRef<any>();\r\n\r\n\tconst onChange = useCallback(\r\n\t\t(nextEditorState: EditorState) => {\r\n\t\t\tsetEditorState(nextEditorState);\r\n\r\n\t\t\tconst content = nextEditorState.getCurrentContent();\r\n\t\t\tconst rawObject = convertToRaw(content);\r\n\t\t\tconst markdownString = draftToMarkdown(rawObject);\r\n\r\n\t\t\tprops.onChange(markdownString);\r\n\t\t},\r\n\t\t[props.onChange]\r\n\t);\r\n\r\n\tconst toggleBlockType = useCallback(\r\n\t\t(blockType: string) =>\r\n\t\t\tsetEditorState(RichUtils.toggleBlockType(editorState, blockType)),\r\n\t\t[editorState]\r\n\t);\r\n\r\n\tconst toggleInlineStyle = useCallback(\r\n\t\t(inlineStyle: string) =>\r\n\t\t\tsetEditorState(\r\n\t\t\t\tRichUtils.toggleInlineStyle(editorState, inlineStyle)\r\n\t\t\t),\r\n\t\t[editorState]\r\n\t);\r\n\r\n\tconst onClickArea = useCallback(\r\n\t\t() => ref && ref.current && ref.current.focus(),\r\n\t\t[ref]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className={classes.richEditorWrapper}>\r\n\t\t\t<RichTextEditorTools\r\n\t\t\t\teditorState={editorState}\r\n\t\t\t\ttoggleBlockType={toggleBlockType}\r\n\t\t\t\ttoggleInlineStyle={toggleInlineStyle}\r\n\t\t\t/>\r\n\t\t\t<div className={classes.richEditorArea} onClick={onClickArea}>\r\n\t\t\t\t<Editor\r\n\t\t\t\t\teditorState={editorState}\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tspellCheck={true}\r\n\t\t\t\t\tcustomStyleMap={styleMap}\r\n\t\t\t\t\tref={ref}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { Zoom } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n\tconvertFromRaw,\r\n\tEditor as MarkdownViewer,\r\n\tEditorState,\r\n} from \"draft-js\";\r\nimport { noop } from \"lodash\";\r\nimport { markdownToDraft } from \"markdown-draft-js\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles({\r\n\tcomment: {\r\n\t\tmarginBottom: 10,\r\n\t\tbackground: \"#e8e8e8\",\r\n\t\tpadding: 10,\r\n\t},\r\n\tauthor: {\r\n\t\tfontWeight: 500,\r\n\t},\r\n\tdate: {\r\n\t\topacity: 0.8,\r\n\t\tmarginBottom: 10,\r\n\t},\r\n});\r\n\r\nexport interface CommentProps {\r\n\ttext: string;\r\n\tauthor: string;\r\n\tdate: string;\r\n\tindex?: number;\r\n\tshowLastComment?: boolean;\r\n\tanimationTimeout?: number;\r\n\tvisible?: boolean;\r\n}\r\n\r\nexport const SingleComment: React.FC<CommentProps> = React.memo(\r\n\t({ author, date, text, ...props }: CommentProps) => {\r\n\t\tconst classes = useStyles();\r\n\r\n\t\tconst markdownString = text;\r\n\t\tconst rawData = markdownToDraft(markdownString);\r\n\t\tconst contentState = convertFromRaw(rawData);\r\n\t\tconst editorState = EditorState.createWithContent(contentState);\r\n\r\n\t\treturn (\r\n\t\t\t<CommentContainer {...props}>\r\n\t\t\t\t<div className={classes.comment}>\r\n\t\t\t\t\t<div className={classes.author}>{author}</div>\r\n\t\t\t\t\t<div className={classes.date}>{date}</div>\r\n\t\t\t\t\t<MarkdownViewer\r\n\t\t\t\t\t\teditorState={editorState}\r\n\t\t\t\t\t\tonChange={noop}\r\n\t\t\t\t\t\treadOnly={true}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</CommentContainer>\r\n\t\t);\r\n\t}\r\n);\r\n\r\nconst CommentContainer: React.FC<\r\n\tPick<\r\n\t\tCommentProps,\r\n\t\t\"index\" | \"showLastComment\" | \"animationTimeout\" | \"visible\"\r\n\t>\r\n> = ({ children, index, showLastComment, animationTimeout, visible }) =>\r\n\tindex === 0 && !visible ? (\r\n\t\t<Zoom in={showLastComment} timeout={animationTimeout}>\r\n\t\t\t<div>{children}</div>\r\n\t\t</Zoom>\r\n\t) : (\r\n\t\t<div>{children}</div>\r\n\t);\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { CommentProps, SingleComment } from \"./Comment\";\r\n\r\nconst useStyles = makeStyles({\r\n\tcomments: {\r\n\t\tmarginBottom: 20,\r\n\t\tmarginTop: 20,\r\n\t\tmaxHeight: 500,\r\n\t\toverflowY: \"auto\",\r\n\t\toverflowX: \"hidden\",\r\n\t},\r\n});\r\n\r\ninterface CommentsProps {\r\n\tdata: CommentProps[];\r\n}\r\n\r\nexport const Comments: React.FC<CommentsProps> = React.memo(({ data }) => {\r\n\tconst classes = useStyles();\r\n\r\n\tconst [showLastComment, setShowLastComment] = useState<boolean>(false);\r\n\tconst [animationTimeout, setAnimationTimeout] = useState<number>(0);\r\n\r\n\tconst dataLengthRef = useRef(data.length);\r\n\tuseEffect(() => {\r\n\t\tif (dataLengthRef.current !== data.length) {\r\n\t\t\tdataLengthRef.current = data.length;\r\n\t\t\tsetShowLastComment(false);\r\n\t\t\tsetAnimationTimeout(0);\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetAnimationTimeout(300);\r\n\t\t\t\tsetShowLastComment(true);\r\n\t\t\t}, 10);\r\n\t\t}\r\n\t}, [data]);\r\n\r\n\treturn (\r\n\t\t<div className={classes.comments}>\r\n\t\t\t{data.map((comment, i) => (\r\n\t\t\t\t<SingleComment\r\n\t\t\t\t\t{...comment}\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\tindex={i}\r\n\t\t\t\t\tshowLastComment={showLastComment}\r\n\t\t\t\t\tanimationTimeout={animationTimeout}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n});\r\n","import { Button } from \"@material-ui/core\";\nimport React, { useCallback, useState } from \"react\";\nimport { RichTextEditor } from \"./components/RichTextEditor/RichTextEditor\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { CommentProps } from \"./components/Comments/Comment\";\nimport { Comments } from \"./components/Comments/Comments\";\nimport fakeApiComments from \"./fake-api.json\";\n\nconst useStyles = makeStyles({\n\tappWrapper: {\n\t\tmargin: \"0 auto\",\n\t\tmaxWidth: 700,\n\t\theight: \"100vh\",\n\t\tpadding: 10,\n\t\tbackground: \"#f5f5f5\",\n\t},\n});\n\nfunction App() {\n\tconst classes = useStyles();\n\tconst [comments, setComments] = useState<CommentProps[]>(fakeApiComments);\n\tconst [forceClean, setForceClean] = useState<number>();\n\n\tconst [currentComment, setCurrentComment] = useState<string>();\n\n\tconst leaveComment = useCallback(() => {\n\t\tif (currentComment) {\n\t\t\tsetComments([\n\t\t\t\t{\n\t\t\t\t\tauthor: \"Тест Тестов\",\n\t\t\t\t\tdate: \"23.09.2020 20:31\",\n\t\t\t\t\ttext: currentComment,\n\t\t\t\t},\n\t\t\t\t...comments,\n\t\t\t]);\n\t\t\tsetForceClean(+new Date());\n\t\t}\n\t}, [currentComment, comments]);\n\n\treturn (\n\t\t<div className={classes.appWrapper}>\n\t\t\t<RichTextEditor\n\t\t\t\tonChange={setCurrentComment}\n\t\t\t\tforceClean={forceClean}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tsize=\"small\"\n\t\t\t\tonClick={leaveComment}\n\t\t\t>\n\t\t\t\tОставить комментарий\n\t\t\t</Button>\n\t\t\t<Comments data={comments} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const customTheme = createMuiTheme({\r\n\tpalette: {\r\n\t\tprimary: {\r\n\t\t\tmain: \"#0088bb\",\r\n\t\t},\r\n\t},\r\n});\r\n","import { CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { customTheme } from \"./customTheme\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<CssBaseline />\n\t\t<ThemeProvider theme={customTheme}>\n\t\t\t<App />\n\t\t</ThemeProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}