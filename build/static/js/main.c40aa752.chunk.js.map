{"version":3,"sources":["components/icons.ts","components/RichTextEditor/RichTextEditorTools.tsx","components/RichTextEditor/RichTextEditor.tsx","components/Comments/Comment.tsx","components/Comments/Comments.tsx","App.tsx","index.tsx"],"names":["icons","List","FormatBold","FormatItalic","FormatUnderlined","useStyles","makeStyles","richEditorTools","borderBottom","btn","padding","borderRadius","borderRight","controls","type","icon","style","RichTextEditorTools","editorState","toggleBlockType","toggleInlineStyle","classes","onToggleControl","useCallback","e","preventDefault","currentStyle","getCurrentInlineStyle","selection","getSelection","blockType","getCurrentContent","getBlockForKey","getStartKey","getType","className","map","control","i","IconComponent","color","has","IconButton","size","onMouseDown","richEditorWrapper","background","border","marginBottom","richEditorArea","minHeight","overflowY","styleMap","BOLD","fontWeight","RichTextEditor","props","useState","EditorState","createEmpty","setEditorState","ref","createRef","onChange","nextEditorState","content","rawObject","convertToRaw","markdownString","draftToMarkdown","RichUtils","inlineStyle","onClickArea","current","focus","onClick","spellCheck","customStyleMap","comment","author","date","opacity","SingleComment","React","memo","text","index","rawData","markdownToDraft","contentState","convertFromRaw","createWithContent","noop","readOnly","CommentContainer","children","Zoom","in","comments","marginTop","Comments","data","key","appWrapper","margin","maxWidth","height","App","setComments","currentComment","setCurrentComment","leaveComment","Button","variant","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.c40aa752.chunk.js","sourcesContent":["import List from \"@material-ui/icons/List\";\r\nimport FormatBold from \"@material-ui/icons/FormatBold\";\r\nimport FormatItalic from \"@material-ui/icons/FormatItalic\";\r\nimport FormatUnderlined from \"@material-ui/icons/FormatUnderlined\";\r\nimport { OverridableComponent } from \"@material-ui/core/OverridableComponent\";\r\nimport { SvgIconTypeMap } from \"@material-ui/core\";\r\n\r\nconst icons: {\r\n\t[key: string]: OverridableComponent<SvgIconTypeMap<{}, \"svg\">>;\r\n} = {\r\n\tList,\r\n\tFormatBold,\r\n\tFormatItalic,\r\n\tFormatUnderlined,\r\n};\r\n\r\nexport const getIcon = (icon: string) => icons[icon];\r\n","import { IconButton } from \"@material-ui/core\";\r\nimport React, { useCallback } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { getIcon } from \"../icons\";\r\nimport { EditorState } from \"draft-js\";\r\n\r\nconst useStyles = makeStyles({\r\n\trichEditorTools: {\r\n\t\tborderBottom: \"1px solid #d2d2d2\",\r\n\t},\r\n\tbtn: {\r\n\t\tpadding: 4,\r\n\t\tborderRadius: 0,\r\n\t\tborderRight: \"1px solid #d2d2d2\",\r\n\t},\r\n});\r\n\r\ninterface ToolControl {\r\n\ttype: \"inline\" | \"block\";\r\n\ticon: string;\r\n\tstyle: string;\r\n}\r\n\r\nconst controls: ToolControl[] = [\r\n\t{\r\n\t\ttype: \"inline\",\r\n\t\ticon: \"FormatBold\",\r\n\t\tstyle: \"BOLD\",\r\n\t},\r\n\t{\r\n\t\ttype: \"inline\",\r\n\t\ticon: \"FormatItalic\",\r\n\t\tstyle: \"ITALIC\",\r\n\t},\r\n\t{\r\n\t\ttype: \"inline\",\r\n\t\ticon: \"FormatUnderlined\",\r\n\t\tstyle: \"UNDERLINE\",\r\n\t},\r\n\t{\r\n\t\ttype: \"block\",\r\n\t\tstyle: \"unordered-list-item\",\r\n\t\ticon: \"List\",\r\n\t},\r\n];\r\n\r\ninterface RichTextEditorToolsProps {\r\n\teditorState: EditorState;\r\n\ttoggleBlockType: (blockType: string) => void;\r\n\ttoggleInlineStyle: (inlineStyle: string) => void;\r\n}\r\n\r\nexport const RichTextEditorTools: React.FC<RichTextEditorToolsProps> = ({\r\n\teditorState,\r\n\ttoggleBlockType,\r\n\ttoggleInlineStyle,\r\n}: RichTextEditorToolsProps): JSX.Element => {\r\n\tconst classes = useStyles();\r\n\tconst onToggleControl = useCallback(\r\n\t\t({ type, style }: ToolControl) => (\r\n\t\t\te: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n\t\t) => {\r\n\t\t\te.preventDefault();\r\n\t\t\tif (type === \"block\") {\r\n\t\t\t\ttoggleBlockType(style);\r\n\t\t\t} else {\r\n\t\t\t\ttoggleInlineStyle(style);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[toggleBlockType, toggleInlineStyle]\r\n\t);\r\n\r\n\tconst currentStyle = editorState.getCurrentInlineStyle();\r\n\tconst selection = editorState.getSelection();\r\n\tconst blockType = editorState\r\n\t\t.getCurrentContent()\r\n\t\t.getBlockForKey(selection.getStartKey())\r\n\t\t.getType();\r\n\r\n\treturn (\r\n\t\t<div className={classes.richEditorTools}>\r\n\t\t\t{controls.map((control, i) => {\r\n\t\t\t\tconst IconComponent = getIcon(control.icon);\r\n\t\t\t\tconst color =\r\n\t\t\t\t\t(control.type === \"inline\" &&\r\n\t\t\t\t\t\tcurrentStyle.has(control.style)) ||\r\n\t\t\t\t\t(control.type === \"block\" && control.style === blockType)\r\n\t\t\t\t\t\t? \"primary\"\r\n\t\t\t\t\t\t: \"default\";\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tclassName={classes.btn}\r\n\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\tonMouseDown={onToggleControl(control)}\r\n\t\t\t\t\t\tcolor={color}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{IconComponent && <IconComponent />}\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { createRef, useCallback, useState } from \"react\";\r\nimport { convertToRaw, Editor, EditorState, RichUtils } from \"draft-js\";\r\nimport { RichTextEditorTools } from \"./RichTextEditorTools\";\r\nimport { draftToMarkdown } from \"markdown-draft-js\";\r\n\r\nconst border = \"1px solid #d2d2d2\";\r\n\r\nconst useStyles = makeStyles({\r\n\trichEditorWrapper: {\r\n\t\tbackground: \"#ffffff\",\r\n\t\tborder,\r\n\t\tmarginBottom: 20,\r\n\t},\r\n\trichEditorArea: {\r\n\t\tpadding: 10,\r\n\t\tminHeight: 200,\r\n\t\toverflowY: \"auto\",\r\n\t},\r\n});\r\n\r\nconst styleMap = {\r\n\tBOLD: {\r\n\t\tfontWeight: 600,\r\n\t},\r\n};\r\n\r\ninterface RichTextEditorProps {\r\n\tonChange: (value: string) => void;\r\n}\r\n\r\nexport const RichTextEditor: React.FC<RichTextEditorProps> = ({\r\n\t...props\r\n}: RichTextEditorProps): JSX.Element => {\r\n\tconst classes = useStyles();\r\n\r\n\tconst [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n\r\n\tconst ref = createRef<any>();\r\n\r\n\tconst onChange = useCallback(\r\n\t\t(nextEditorState: EditorState) => {\r\n\t\t\tsetEditorState(nextEditorState);\r\n\r\n\t\t\tconst content = nextEditorState.getCurrentContent();\r\n\t\t\tconst rawObject = convertToRaw(content);\r\n\t\t\tconst markdownString = draftToMarkdown(rawObject);\r\n\r\n\t\t\tprops.onChange(markdownString);\r\n\t\t},\r\n\t\t[props.onChange]\r\n\t);\r\n\r\n\tconst toggleBlockType = useCallback(\r\n\t\t(blockType: string) =>\r\n\t\t\tsetEditorState(RichUtils.toggleBlockType(editorState, blockType)),\r\n\t\t[editorState]\r\n\t);\r\n\r\n\tconst toggleInlineStyle = useCallback(\r\n\t\t(inlineStyle: string) =>\r\n\t\t\tsetEditorState(\r\n\t\t\t\tRichUtils.toggleInlineStyle(editorState, inlineStyle)\r\n\t\t\t),\r\n\t\t[editorState]\r\n\t);\r\n\r\n\tconst onClickArea = useCallback(\r\n\t\t() => ref && ref.current && ref.current.focus(),\r\n\t\t[ref]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className={classes.richEditorWrapper}>\r\n\t\t\t<RichTextEditorTools\r\n\t\t\t\teditorState={editorState}\r\n\t\t\t\ttoggleBlockType={toggleBlockType}\r\n\t\t\t\ttoggleInlineStyle={toggleInlineStyle}\r\n\t\t\t/>\r\n\t\t\t<div className={classes.richEditorArea} onClick={onClickArea}>\r\n\t\t\t\t<Editor\r\n\t\t\t\t\teditorState={editorState}\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tspellCheck={true}\r\n\t\t\t\t\tcustomStyleMap={styleMap}\r\n\t\t\t\t\tref={ref}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { Zoom } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n\tconvertFromRaw,\r\n\tEditor as MarkdownViewer,\r\n\tEditorState,\r\n} from \"draft-js\";\r\nimport { noop } from \"lodash\";\r\nimport { markdownToDraft } from \"markdown-draft-js\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles({\r\n\tcomment: {\r\n\t\tmarginBottom: 10,\r\n\t\tbackground: \"#dddddd\",\r\n\t\tpadding: 10,\r\n\t},\r\n\tauthor: {\r\n\t\tfontWeight: 500,\r\n\t},\r\n\tdate: {\r\n\t\topacity: 0.8,\r\n\t\tmarginBottom: 10,\r\n\t},\r\n});\r\n\r\nexport interface CommentProps {\r\n\ttext: string;\r\n\tauthor: string;\r\n\tdate: string;\r\n\tindex?: number;\r\n}\r\n\r\nexport const SingleComment: React.FC<CommentProps> = React.memo(\r\n\t({ author, date, text, index }: CommentProps) => {\r\n\t\tconst classes = useStyles();\r\n\r\n\t\tconst markdownString = text;\r\n\t\tconst rawData = markdownToDraft(markdownString);\r\n\t\tconst contentState = convertFromRaw(rawData);\r\n\t\tconst editorState = EditorState.createWithContent(contentState);\r\n\r\n\t\treturn (\r\n\t\t\t<CommentContainer index={index}>\r\n\t\t\t\t<div className={classes.comment}>\r\n\t\t\t\t\t<div className={classes.author}>{author}</div>\r\n\t\t\t\t\t<div className={classes.date}>{date}</div>\r\n\t\t\t\t\t<MarkdownViewer\r\n\t\t\t\t\t\teditorState={editorState}\r\n\t\t\t\t\t\tonChange={noop}\r\n\t\t\t\t\t\treadOnly={true}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</CommentContainer>\r\n\t\t);\r\n\t}\r\n);\r\n\r\nconst CommentContainer: React.FC<{ index?: number }> = ({ children, index }) =>\r\n\tindex === 1 ? (\r\n\t\t<Zoom in={true}>\r\n\t\t\t<>{children}</>\r\n\t\t</Zoom>\r\n\t) : (\r\n\t\t<>{children}</>\r\n\t);\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport { CommentProps, SingleComment } from \"./Comment\";\r\n\r\nconst useStyles = makeStyles({\r\n\tcomments: {\r\n\t\tmarginBottom: 20,\r\n\t\tmarginTop: 20,\r\n\t},\r\n});\r\n\r\ninterface CommentsProps {\r\n\tdata: CommentProps[];\r\n}\r\n\r\nexport const Comments: React.FC<CommentsProps> = ({ data }) => {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.comments}>\r\n\t\t\t{data.map((comment, i) => (\r\n\t\t\t\t<SingleComment {...comment} key={i} index={i} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { Button } from \"@material-ui/core\";\nimport React, { useCallback, useState } from \"react\";\nimport { RichTextEditor } from \"./components/RichTextEditor/RichTextEditor\";\nimport { noop } from \"lodash\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { CommentProps } from \"./components/Comments/Comment\";\nimport { Comments } from \"./components/Comments/Comments\";\n\nconst useStyles = makeStyles({\n\tappWrapper: {\n\t\tmargin: \"0 auto\",\n\t\tmaxWidth: 700,\n\t\theight: \"100vh\",\n\t\tpadding: 10,\n\t\tbackground: \"#f5f5f5\",\n\t},\n});\n\nfunction App() {\n\tconst classes = useStyles();\n\tconst [comments, setComments] = useState<CommentProps[]>([]);\n\n\tconst [currentComment, setCurrentComment] = useState<string>();\n\n\tconst leaveComment = useCallback(\n\t\t() =>\n\t\t\tcurrentComment &&\n\t\t\tsetComments([\n\t\t\t\t{\n\t\t\t\t\tauthor: \"Тест Тестов\",\n\t\t\t\t\tdate: \"23.09.2020 20:31\",\n\t\t\t\t\ttext: currentComment,\n\t\t\t\t},\n\t\t\t\t...comments,\n\t\t\t]),\n\t\t[currentComment, comments]\n\t);\n\n\treturn (\n\t\t<div className={classes.appWrapper}>\n\t\t\t<RichTextEditor onChange={setCurrentComment} />\n\t\t\t<Button\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tsize=\"small\"\n\t\t\t\tonClick={leaveComment}\n\t\t\t>\n\t\t\t\tОставить комментарий\n\t\t\t</Button>\n\t\t\t<Comments data={comments} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { CssBaseline } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<CssBaseline />\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}